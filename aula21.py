# Entendendo melhor as funções percebemos o tanto que elas podem ser úteis ao longo do seu código. Diferente de outras linguagens, o Python pussui uma ajuda interativa poderosissíma; Usando a função interna `help()` nós podemos acessar um guia detalhado de como usar cada comando interno, assim como uma lista de comandos de cada biblíoteca presente na linguagem. Para conseguir usar essa função, chamamos ela, e entre o parênteses colocamos o nome da função que desejamos entender. Ex: `help(print)`. Da mesma forma podemos usar o comando `print.__doc__`, colocando o nome da função desejada, um ponto, dois under'lines, a palavra "doc" e mais dois under'lines. Para escrever o "doc" da sua própia função, você pode abrir e fechar três áspas duplas na primeira linha de intruções da sua função, logo após a linha onde à definiu; "def".        E também, e tão relevante quanto isso, o Python nos permite criar "parâmetros condicionais", que não precisam ser declarados diretamente quando a função é chamada. O nome "condicional" se deve por conta de uma incrivel caracteristica; Caso esse parâmetro não seja declarado no chamado, ele receberá um valor antes definido (na criação da função). Para fazer isso, ao criar o nome do parâmetro, você pode simplismente escrever um sinal de igual e atribuir um valor em caso dele não receber nenhum valor.        O escopo de variàveis também é algo fascinante. Variàveis declaradas no PROGRAMA PRINCIPAL são "GLOBAIS", enquanto variáveis definidas dentro de funções, são "LOCAIS". A diferença entre "global" e "local" é simples; Quando uma variável é definida no programa principal, ela pode ser usada em qualquer lugar do código, seja dentro de "def", ou qualquer outro lugar. Já as "locais" só existem enquanto estiverem dentro do bloco de instruções da função. Elas são limitadas a existirem apenas no seu "local", e nada além disso. Sempre que uma variável é declarada dentro de uma função, é criado um espaço na memória local pra ela ser armazenada, e caso uma variável com esse nome já exista, se cria uma cópia com o mesmo nome, porém de valor diferente (o valor atribuído dentro do local). Para que se possa usar o valor de uma variável "global" dentro de uma função "local", você antes deve pedir ao Python para não criar uma cópia de mesmo nome, e sim usar a variável global. Para isso, basta escrever "global" e o nome da variável desejada. ex: "global idade".      E por fim, usando palavra chave "return", nós podemos fazer com que a função não necessariamente execute um código ou escreva algo, mas também retorne algum valor específico. Ex: "return fatorial"

def fac(num=1):  # Definindo a função "fac" com um parâmetro condicional, que caso não receba nenhum valor, valerá 1. Logo após criando o doc da minha função
    """
    ->  Calcula o fatorial do parâmetro passado
    
    :param num: O fatorial que deseja
    :return: fatorial 

    __Função feita por Port durante os primeiros passos do projeto Orion__
    """
    fatorial = 1  # Iniciando a variável "fatorial" com 1
    for numero in range(num, 0, -1):  # Para cada "numero" no range de "num" à zero, pulando de menos um em menos um
        fatorial *= numero  # "fatorial" recebe "fatorial" vezes "numero"
    
    return fatorial  # Usando o "return" para que a função "fac" tenha como retorno o valor de "fatoral"


# Programa principal
print(f"O fatorial deste número é: {fac(int(input("Digite um número: ")))}")  # Usando a função que eu mesmo criei. Eu posso usar como parâmetro pra está função uma entrada dada pelo usuário. Usando uma f-string para formatar o valor da saída de uma função que recebe como parâmetro o input de uma entrada do usuário convertida para um inteiro. Desta forma a pergunta feita para receber a entrada do usuário acontece antes da execução do print em si